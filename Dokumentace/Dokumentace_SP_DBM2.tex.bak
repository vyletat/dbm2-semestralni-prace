\documentclass[a4, titlepage]{article}

\usepackage[czech]{babel}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}

\usepackage{graphicx}
\graphicspath{ {./img/} }

\usepackage{hyperref}
\hypersetup{
    colorlinks=true,
    linkcolor=blue,
    filecolor=magenta,      
    urlcolor=cyan,
}
\usepackage{listings}

\begin{document}

\title{Dokumentace k semestrální práci z předmětu KIV/DBM2}
%\subtitle{AlaSQL}
\author{Bc. Tomáš Vyleta}
\date{}

\maketitle

\tableofcontents
\newpage

\section*{Úvod}

\subsection*{Problém}
Problémem či zadáním semestrální práce je nalézt a popsat knihovnu pro zpracování množiny souborů ve formátu JSON, které většinou vrací endpointy REST API. Využít ji na úrovni jednoho programu (bez nutnosti vkládání dat do jiných SŘBD pro zpracování objektových souborů). Knihovna by měla být schopna poskytovat funkce obsažené v jazyce SQL jako FROM, GROUP BY, JOIN, atd. Cíle práce jsou: 

\begin{itemize}
	\item Nalezněte existující metody dotazováním se nad množinou JSON souborů.
	\item Popište rozsah nabízených operací ve vybraném jazyce/nástroji.
	\item Analyzujte možnosti jazyka/nástroje v kontrastu s klasickou relační databází resp. SQL.
\end{itemize}

\subsection*{Knihovna AlaSQL}
AlaSQL (čti à la SQL)je \textit{open source} SQL databáze pro JavaScript, operující na straně klienta. Implementuje mnoho funkcí ze čtvrté verze jazyka SQL (SQL:1999) a také některé funkce navíc pro snažší manipulaci s NoSQL a grafovými sítěmi. Také podporuje asynchronní volání pomocí metody promise. Knihovnu lze využít pro webové aplikace, aplikace založené na Node.js nebo v mobilních aplikacích.

Podporuje import/export formátů, jako jsou např. tabulky programu Excel (.xls), CSV - Comma-separated values (.csv), již zmiňovaný JSON - JavaScript Object Notation (.json), TAB - Tab Separated Data File (.tab), IndexedDB, LocalStorage a SQLite.

\begin{figure}[h]
    \centering
    \includegraphics[width=5cm]{alasql_logo}
    \caption{Logo AlaSQL}
\end{figure}

Užitečné odkazy:
\begin{itemize}
	\item WEB: \url{http://alasql.org}
	\item Github: \url{https://github.com/agershun/alasql}
\end{itemize}


\section{Instalace}
Knihovna je dostupná v několika JavaScriptových správcích balíčků (package management) kterými jsou npm, Bover, Meteor nebo si ji můžete přímo naklonovat/stáhnout z officiálního GitHub repozitáře. 

Pokud nechcete stahovat knihovnu na fyzické úložiště, nejjednodušší varianta je získat AlaSQL do své aplikace pomocí cloudové služby \href{https://cdnjs.com/libraries/alasql}{cdnjs.com}, která je založena na principu CDN (Content Delivery Network). Stačí tedy do našeho projektu vložit odkaz na tuto knihovnu, např. do hlavičky HTML souboru:

\begin{lstlisting}[language=HTML]
<script src="//cdn.jsdelivr.net/alasql/0.2/alasql.min.js"></script> 
\end{lstlisting}


\section{Použití}
Po úspěšném nainstalovaní/naimportování knihovny jsme schopni ji začít používat. Nyní je několik možností jak pracovat s databází.

\subsection{Funkcí}
Všechny dotazy (queries) se vkládají jako atribut metody \textit{alasql(stringWithSQL)} nebo jiné proměnné, pokud si je nazvete, třeba v Node.js.

\begin{lstlisting}
var alasql = require('alasql');
alasql('CREATE TABLE one (two INT)');
\end{lstlisting}

\subsection{Nová databáze}
Můžeme do proměnné založit novou databázi a nad vytvořenou proměnnou zavolat funkci \textit{exec()} do které vložíme dotaz jako atribut jako v předchozí sekci. Můžeme také vkládat více dotazů oddělených ;, kde poté navrácená hodnota bude jako pole výsledků.

\begin{lstlisting}
var mybase = new alasql.Database();
mybase.exec('CREATE TABLE one (two INT)');
\end{lstlisting}

Funkce \textit{alasql()} je zkrácenou verzí \textit{alasql.exec()}.

Také k ním můžete přistupovat přes globální objekt \textit{alasql}.

\begin{lstlisting}
var mybase = new alasql.Database('mybase');
console.log(alasql.databases.mybase);
\end{lstlisting}

\subsection{Compile section}


\section{Synchronní/Asynchronní přístup}
Za normálního běhu knihovna vykonává procesy synchronně, ale jdou také volat callbacky nebo asynchronní volání pomocí metody \textit{promise()}. Pokud pracujete se soubory, načítáte je, pak knihovna funguje asynchronně a je doporučeno používat již zmíněnou metodu \textit{promise()}.

\section{Import/Export dat}
\subsection{Textový soubor}
\subsection{CSV}
\subsection{TAB}
\subsection{XLS}

\subsection{HTML}
Knihovna dokáže číst data z HTML tabulky <table>...</table> a výsledek opět vygenerovat do HTML tabulky.
\subsubsection{Čtení z tabulky}
\begin{lstlisting}[language=SQL]
alasql('SELECT * FROM HTML("#MyTable", {headers:true})');
\end{lstlisting}

\subsubsection{Zápis do tabulky}
\begin{lstlisting}[language=SQL]
alasql('SELECT * INTO HTML("#MyTable", {headers:true}) FROM ?',[data]);
\end{lstlisting}

\subsection{JSON}


\subsection{Založení tabulky}


\section{SQL dotazy}



\newpage
\listoffigures

\end{document}